{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcc4 Overview","text":"<p>A Python library to interact with Department of Government Efficiency (DOGE) API.</p> <p></p>  \ud83e\uddfe Table of Contents <ol> <li> About The Project </li> <li> Highlights </li> <li> Getting Started <ul> <li>Installation</li> </ul> </li> <li>Usage <ul> <li>Synchronous Fetching</li> <li>Asynchronous Pagination</li> </ul> </li> <li>Contributors </li> <li>Acknowledgements </li> </ol>"},{"location":"#about-the-project","title":"\ud83d\udc0d About The Project","text":"<p>PyDOGE API is an advanced, Python wrapper for interacting with the public-facing API of the Department of Government Efficiency (DOGE) \u2014 a federal initiative aimed at increasing transparency and fiscal accountability by sharing detailed datasets on:</p> <ul> <li>\ud83d\udcb8 Cancelled grants</li> <li>\ud83d\udcd1 Contract terminations</li> <li>\ud83c\udfe2 Lease reductions</li> <li>\ud83e\uddfe Payment transactions</li> </ul>"},{"location":"#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Auto-pagination (sync or async, fetch all pages if needed)</li> <li><code>.export()</code> to CSV, Excel, or JSON with timestamped filenames  </li> <li><code>.to_dataframe()</code> for Pandas users </li> <li><code>.summary()</code> with analytics (rows, nulls, dtypes, stats)  </li> <li><code>summary(save_as=\"...\")</code> for file logging  </li> <li>Returns Pydantic models &amp; dict output</li> <li>Retry-safe client with 429 handling</li> </ul> <p>This package enables data scientists and analysts to programmatically access and analyze the data with ease.</p>"},{"location":"#getting-started","title":"\ud83d\udccc Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<p>Install: <pre><code>pip install pydoge-api\n</code></pre> Upgrade: <pre><code>pip install --upgrade pydoge-api\n</code></pre></p> <p>Documentation</p> <p>Full developer docs with API reference, usage, and model schema:</p> <ul> <li>\ud83d\udc49 Docs and Examples (PyDOGE)</li> <li>\ud83d\udc49 Official Swagger Page</li> </ul>"},{"location":"#usage","title":"\ud83d\udcda Usage","text":""},{"location":"#synchronous-fetching","title":"Synchronous Fetching","text":"<pre><code>from pydoge_api import DogeAPI\n\napi = DogeAPI(\n    fetch_all=True,             # get all pages\n    output_pydantic=False,      # dict output\n    handle_response=True,       # parse response\n    run_async=False             # \u2190 synchronous mode\n)\n\n# Grants sorted by savings\ngrants = api.savings.get_grants(sort_by=\"savings\")\n\n# Filter payments by agency\npayments = api.payments.get_payments(filter=\"agency\", filter_value=\"NASA\")\n</code></pre>"},{"location":"#asynchronous-pagination","title":"Asynchronous Pagination","text":"<pre><code>api = DogeAPI(\n    fetch_all=True,\n    output_pydantic=True,\n    handle_response=True,\n    run_async=True              # \u2190 enable async parallel fetch\n)\n\ngrants = api.savings.get_grants(sort_by=\"value\")\nprint(grants.meta.total_results)\n</code></pre> <p>(back to top)</p>"},{"location":"#contributors","title":"\ud83d\udc6a Contributors","text":"<p>All contributions are welcome. If you have a suggestion that would make this better, please fork the repo and create a merge request. You can also simply open an issue with the label 'enhancement'.</p> <p>Don't forget to give the project a star! Thanks again!</p>"},{"location":"#acknowledgments","title":"\ud83d\udc4f Acknowledgments","text":"<p>Inspiration, code snippets, etc.</p> <p>(back to top)</p>"},{"location":"usage/","title":"Quickstart Guide","text":""},{"location":"usage/#standard-synchronous-usage","title":"Standard Synchronous Usage","text":"<pre><code>from pydoge_api import DogeAPI\n\napi = DogeAPI(\n    fetch_all=True,\n    output_pydantic=False,\n    handle_response=True,\n    run_async=False\n)\n\n# Get Grants and sorted by savings\ngrants = api.savings.get_grants(sort_by=\"savings\")\n\n# Get Contracts and sorted by agency\ncontracts = api.savings.get_contracts(sort_by=\"agency\")\n\n# Get Leases\nleases = api.savings.get_leases()\n\n# Get Payments and filter payments by agency\npayments = api.payments.get_payments(filter=\"agency\", filter_value=\"NASA\")\n\n# Export to CSV\ngrants.export(\"grants_q1\", format=\"csv\")\n\n# Show summary in terminal\ngrants.summary(verbose=True)\n\n# Save the summary as markdown\ngrants.summary(save_as=\"logs/grants_summary.md\")\n</code></pre>"},{"location":"usage/#async-usage-example","title":"Async Usage Example","text":"<pre><code>api = DogeAPI(\n    fetch_all=True,\n    output_pydantic=True,\n    run_async=True\n)\n\ngrants = api.savings.get_grants(sort_by=\"value\")\n\ngrants.export(\"grants_report\", format=\"xlsx\")\n</code></pre>"},{"location":"usage/#config-flags","title":"Config Flags","text":"Flag Description fetch_all Fetch all paginated results output_pydantic Return Pydantic models if True handle_response Return parsed data or raw httpx.Response run_async Use async parallel fetching if True"},{"location":"usage/#export-formats","title":"Export Formats","text":"<pre><code>response.export(\"filename\", format=\"csv\")\nresponse.export(\"filename\", format=\"xlsx\")\nresponse.export(\"filename\", format=\"json\")\n</code></pre>"},{"location":"usage_exports/","title":"\ud83d\udcbe Exporting &amp; Summarizing Data","text":"<p>Every response returned by the PyDoge SDK \u2014 whether a Pydantic model or plain dictionary \u2014 supports:</p> <ul> <li><code>.export()</code> \u2014 Save data to CSV, Excel, or JSON</li> <li><code>.to_dataframe()</code> \u2014 Get a Pandas DataFrame</li> <li><code>.summary()</code> \u2014 See an analytics-style report in terminal</li> </ul> <p>These methods are available on all major responses: - Grants - Payments - Contracts - Leases</p>"},{"location":"usage_exports/#export","title":"\ud83d\udce4 <code>.export()</code>","text":"<p><pre><code>grants = api.savings.get_grants()\ngrants.export(\"grants_q2\", format=\"csv\")\ngrants.export(\"grants_q2\", format=\"xlsx\")\ngrants.export(\"grants_q2\", format=\"json\")\n</code></pre> This saves a timestamped file like:</p> <p><pre><code>grants_q2_20250410_172308.csv\n</code></pre> \u2705 Works for both output_pydantic=True and False.</p>"},{"location":"usage_exports/#to_dataframe","title":"\ud83d\udcca <code>.to_dataframe()</code>","text":"<p><pre><code>df = grants.to_dataframe()\nprint(df.shape)\ndf.plot(\"date_closed\", \"savings\")\n</code></pre> This is helpful for:</p> <ul> <li>Analytics</li> <li>Plotting</li> <li>Custom filters</li> </ul>"},{"location":"usage_exports/#summaryverbosetrue","title":"\ud83d\udcc8 <code>.summary(verbose=True)</code>","text":"<p><pre><code>grants.summary()\ngrants.summary(verbose=True)\n\n# Show summary in terminal\ngrants.summary(verbose=True)\n\n# Save the summary as markdown\ngrants.summary(save_as=\"logs/grants_summary.md\")\n</code></pre> Output:</p> <ul> <li>Total rows and columns</li> <li>Nulls by column</li> <li>Dtypes</li> <li>Numeric stats (mean, min, max)</li> <li>Top categories</li> <li>Optional .head() preview</li> </ul> <p>\ud83e\uddea Example Output</p> <pre><code>\ud83d\udcca PyDoge Data Summary\n========================================\n\ud83e\uddfe Rows       : 2450\n\ud83e\uddec Columns    : 8\n\ud83d\udd73\ufe0f  Total NaNs : 17\n\n\ud83d\udcd1 Column Data Types:\nid              int64\nagency         object\nsavings       float64\n\n\ud83d\udcc9 Nulls by Column:\nsavings     7\nstatus      10\n\n\ud83d\udcc8 Numeric Column Stats:\n         count      mean      std     min       max\nsavings  2443.0  151234.3  98231.4  100.0   998500.0\n\n\ud83d\udd20 Top Categories:\n[status]\ncompleted     1300\ncancelled      900\npending        250\n\n\ud83d\udccb Sample Preview:\n   id agency status savings\n0   1   NASA   completed  100000.0\n...\n</code></pre>"},{"location":"reference/client/","title":"DogeAPI Client","text":""},{"location":"reference/client/#pydoge_api.DogeAPI","title":"DogeAPI","text":"<pre><code>DogeAPI(\n    *,\n    fetch_all=False,\n    output_pydantic=False,\n    handle_response=True,\n    run_async=False\n)\n</code></pre> <p>Entry point for the DOGE API SDK.</p> <p>Parameters:</p>"},{"location":"reference/client/#pydoge_api.DogeAPI(fetch_all)","title":"<code>fetch_all</code>","text":"\u2013            <p>Automatically fetch all pages (True) or just one page (False).</p>"},{"location":"reference/client/#pydoge_api.DogeAPI(output_pydantic)","title":"<code>output_pydantic</code>","text":"\u2013            <p>Return data as pydantic models (True) or as plain dicts (False).</p>"},{"location":"reference/client/#pydoge_api.DogeAPI(handle_response)","title":"<code>handle_response</code>","text":"\u2013            <p>If False, return raw httpx.Response.</p>"},{"location":"reference/client/#pydoge_api.DogeAPI(run_async)","title":"<code>run_async</code>","text":"\u2013            <p>Enable async parallel pagination if True.</p>"},{"location":"reference/models_payments/","title":"Payments Models","text":""},{"location":"reference/models_payments/#pydoge_api.models.payments","title":"payments","text":""},{"location":"reference/models_savings/","title":"Savings Models","text":""},{"location":"reference/models_savings/#pydoge_api.models.savings","title":"savings","text":""},{"location":"reference/payments/","title":"Payments","text":""},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsEndpoint","title":"PaymentsEndpoint","text":"<pre><code>PaymentsEndpoint(client: DogeAPIClient, api: DogeAPI)\n</code></pre> <p>Payments made by the US Government. Currently, this includes a limited amount of grant payments issued from the Program Support Center, but will expand to include all payments from the US Government..</p> <p>Methods:</p> <ul> <li> <code>get_payments</code>             \u2013              <p>Retrieve government payments with optional filtering and pagination.</p> </li> </ul>"},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsEndpoint.get_payments","title":"get_payments","text":"<pre><code>get_payments(\n    *,\n    sort_by=None,\n    sort_order=None,\n    page=1,\n    per_page=100,\n    filter=None,\n    filter_value=None\n)\n</code></pre> <p>Retrieve government payments with optional filtering and pagination.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>PaymentResponse | dict | Response</code>           \u2013            <p>Parsed Pydantic model if <code>output_pydantic=True</code>, raw dict otherwise, or <code>httpx.Response</code> if <code>handle_response=False</code>.</p> </li> </ul>"},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsEndpoint.get_payments(sort_by)","title":"<code>sort_by</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Field to sort by. Options include 'amount', 'post_date', etc.</p>"},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsEndpoint.get_payments(sort_order)","title":"<code>sort_order</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Sort order direction: 'asc' or 'desc'.</p>"},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsEndpoint.get_payments(page)","title":"<code>page</code>","text":"(<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Page number to fetch (default is 1).</p>"},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsEndpoint.get_payments(per_page)","title":"<code>per_page</code>","text":"(<code>int</code>, default:                   <code>100</code> )           \u2013            <p>Items per page to return (default 100, max 500).</p>"},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsEndpoint.get_payments(filter)","title":"<code>filter</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Optional filter key (e.g. 'agency').</p>"},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsEndpoint.get_payments(filter_value)","title":"<code>filter_value</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Value to filter results by.</p>"},{"location":"reference/savings/","title":"Savings","text":""},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint","title":"SavingsEndpoint","text":"<pre><code>SavingsEndpoint(client: DogeAPIClient, api: DogeAPI)\n</code></pre> <p>Grants, contracts and leases the Department of Government Efficiency has cancelled.</p> <p>Methods:</p> <ul> <li> <code>get_grants</code>             \u2013              <p>Retrieve canceled government grants.</p> </li> <li> <code>get_contracts</code>             \u2013              <p>Retrieve canceled government contracts.</p> </li> <li> <code>get_leases</code>             \u2013              <p>Retrieve canceled or terminated government leases.</p> </li> </ul>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_grants","title":"get_grants","text":"<pre><code>get_grants(\n    *, sort_by=None, sort_order=None, page=1, per_page=100\n)\n</code></pre> <p>Retrieve canceled government grants.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>GrantResponse | dict | Response</code>           \u2013            <p>Parsed model, raw dict, or raw response depending on DogeAPI config.</p> </li> </ul>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_grants(sort_by)","title":"<code>sort_by</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Field to sort by: 'savings', 'value', or 'date'.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_grants(sort_order)","title":"<code>sort_order</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Sort order direction: 'asc' or 'desc'.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_grants(page)","title":"<code>page</code>","text":"(<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Page number to start from (default: 1).</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_grants(per_page)","title":"<code>per_page</code>","text":"(<code>int</code>, default:                   <code>100</code> )           \u2013            <p>Number of results per page (default: 100).</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_contracts","title":"get_contracts","text":"<pre><code>get_contracts(\n    *, sort_by=None, sort_order=None, page=1, per_page=100\n)\n</code></pre> <p>Retrieve canceled government contracts.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>ContractResponse | dict | Response</code>           \u2013            <p>Parsed model, raw dict, or raw response depending on DogeAPI config.</p> </li> </ul>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_contracts(sort_by)","title":"<code>sort_by</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Field to sort by. Options: 'savings', 'value', or 'agency'.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_contracts(sort_order)","title":"<code>sort_order</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Sort direction: 'asc' or 'desc'.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_contracts(page)","title":"<code>page</code>","text":"(<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Page number to retrieve (default is 1).</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_contracts(per_page)","title":"<code>per_page</code>","text":"(<code>int</code>, default:                   <code>100</code> )           \u2013            <p>Number of results per page (default is 100).</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_leases","title":"get_leases","text":"<pre><code>get_leases(\n    *, sort_by=None, sort_order=None, page=1, per_page=100\n)\n</code></pre> <p>Retrieve canceled or terminated government leases.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>LeaseResponse | dict | Response</code>           \u2013            <p>Parsed model, raw dict, or raw response depending on DogeAPI config.</p> </li> </ul>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_leases(sort_by)","title":"<code>sort_by</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Field to sort by. Options: 'sq_ft', 'value', or 'agency'.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_leases(sort_order)","title":"<code>sort_order</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Sort direction: 'asc' or 'desc'.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_leases(page)","title":"<code>page</code>","text":"(<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Page number to retrieve (default is 1).</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_leases(per_page)","title":"<code>per_page</code>","text":"(<code>int</code>, default:                   <code>100</code> )           \u2013            <p>Number of results per page (default is 100).</p>"},{"location":"reference/utils_export/","title":"\ud83e\uddf1 ExportableMixin Utility","text":""},{"location":"reference/utils_export/#pydoge_api.utils.exporter.ExportMixin","title":"ExportMixin","text":"<p>Methods:</p> <ul> <li> <code>export</code>             \u2013              </li> <li> <code>to_dataframe</code>             \u2013              <p>Convert the response data collection to a Pandas DataFrame.</p> </li> <li> <code>summary</code>             \u2013              <p>Print and optionally save an analytics summary of the dataset.</p> </li> </ul>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.ExportMixin.export","title":"export","text":"<pre><code>export(\n    filename: str = \"doge_data\", format: str = \"csv\"\n) -&gt; Path\n</code></pre>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.ExportMixin.to_dataframe","title":"to_dataframe","text":"<pre><code>to_dataframe() -&gt; DataFrame\n</code></pre> <p>Convert the response data collection to a Pandas DataFrame.</p> <p>Returns:</p> <ul> <li> <code>DataFrame</code>           \u2013            </li> </ul>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.ExportMixin.summary","title":"summary","text":"<pre><code>summary(verbose: bool = False, save_as: str = None)\n</code></pre> <p>Print and optionally save an analytics summary of the dataset.</p> <p>Parameters:</p>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.ExportMixin.summary(verbose)","title":"<code>verbose</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, print a head preview of the data.</p>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.ExportMixin.summary(save_as)","title":"<code>save_as</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Path to save the summary text (e.g. \"summary.md\" or \"report.txt\").</p>"},{"location":"reference/utils_export/#utility-functions","title":"\ud83d\udd01 Utility Functions","text":""},{"location":"reference/utils_export/#handle_dict","title":"<code>handle_dict</code>","text":"<p>This ensures that even raw dict responses support <code>.export()</code>.</p>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.handle_dict","title":"handle_dict","text":"<pre><code>handle_dict(obj)\n</code></pre> Source code in <code>src/pydoge_api/utils/exporter.py</code> <pre><code>def handle_dict(obj):\n    if isinstance(obj, dict) and not hasattr(obj, \"export\"):\n        new_obj = DictExportable(**obj)\n        return new_obj\n    return obj\n</code></pre>"},{"location":"reference/utils_export/#dictexportable","title":"<code>DictExportable</code>","text":"<p>A subclass of <code>dict</code> that supports <code>.export()</code>, <code>.to_dataframe()</code>, <code>.summary()</code>. Used when <code>output_pydantic=False</code>.</p>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.DictExportable","title":"DictExportable","text":"<p>A dict subclass with .export() support</p> <p>Methods:</p> <ul> <li> <code>summary</code>             \u2013              <p>Print and optionally save an analytics summary of the dataset.</p> </li> <li> <code>to_dataframe</code>             \u2013              <p>Convert the response data collection to a Pandas DataFrame.</p> </li> </ul>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.DictExportable.summary","title":"summary","text":"<pre><code>summary(verbose: bool = False, save_as: str = None)\n</code></pre> <p>Print and optionally save an analytics summary of the dataset.</p> <p>Parameters:</p> Source code in <code>src/pydoge_api/utils/exporter.py</code> <pre><code>def summary(self, verbose: bool = False, save_as: str = None):\n    \"\"\"\n    Print and optionally save an analytics summary of the dataset.\n\n    Parameters\n    ----------\n    verbose : bool\n        If True, print a head preview of the data.\n    save_as : str, optional\n        Path to save the summary text (e.g. \"summary.md\" or \"report.txt\").\n    \"\"\"\n\n    df = self.to_dataframe()\n    out = StringIO()\n\n    def p(text=\"\"):\n        print(text, file=out)\n\n    p(\"\ud83d\udcca PyDoge Data Summary\")\n    p(\"=\" * 40)\n    p(f\"\ud83e\uddfe Rows       : {df.shape[0]}\")\n    p(f\"\ud83e\uddec Columns    : {df.shape[1]}\")\n    p(f\"\ud83d\udd73\ufe0f  Total NaNs : {df.isnull().sum().sum()}\\n\")\n\n    p(\"\ud83d\udcd1 Column Data Types:\")\n    p(df.dtypes.to_string())\n    p(\"\")\n\n    nulls = df.isnull().sum()\n    nulls = nulls[nulls &gt; 0]\n    p(\"\ud83d\udcc9 Nulls by Column:\")\n    p(nulls.to_string() if not nulls.empty else \"\u2705 No null values detected\")\n    p(\"\")\n\n    numeric_cols = df.select_dtypes(include=\"number\").columns\n    if not numeric_cols.empty:\n        p(\"\ud83d\udcc8 Numeric Column Stats:\")\n        stats = df[numeric_cols].agg([\"count\", \"mean\", \"std\", \"min\", \"max\"]).T\n        stats = stats[[\"count\", \"mean\", \"std\", \"min\", \"max\"]]\n        p(stats.round(2).to_string())\n        p(\"\")\n\n    cat_cols = df.select_dtypes(include=\"object\").columns\n    if not cat_cols.empty:\n        p(\"\ud83d\udd20 Top Categories:\")\n        for col in cat_cols:\n            top = df[col].value_counts().head(3)\n            p(f\"\\n[{col}]\")\n            p(top.to_string())\n\n    if verbose:\n        p(\"\\n\ud83d\udccb Sample Preview:\")\n        p(df.head().to_string())\n\n    # Print to terminal\n    print(out.getvalue())\n\n    # Optionally save to file\n    if save_as:\n        with open(save_as, \"w\", encoding=\"utf-8\") as f:\n            f.write(out.getvalue())\n</code></pre>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.DictExportable.summary(verbose)","title":"<code>verbose</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, print a head preview of the data.</p>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.DictExportable.summary(save_as)","title":"<code>save_as</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Path to save the summary text (e.g. \"summary.md\" or \"report.txt\").</p>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.DictExportable.to_dataframe","title":"to_dataframe","text":"<pre><code>to_dataframe() -&gt; DataFrame\n</code></pre> <p>Convert the response data collection to a Pandas DataFrame.</p> <p>Returns:</p> <ul> <li> <code>DataFrame</code>           \u2013            </li> </ul> Source code in <code>src/pydoge_api/utils/exporter.py</code> <pre><code>def to_dataframe(self) -&gt; pd.DataFrame:\n    \"\"\"\n    Convert the response data collection to a Pandas DataFrame.\n\n    Returns\n    -------\n    pd.DataFrame\n    \"\"\"\n    return pd.DataFrame(self._get_collection())\n</code></pre>"}]}