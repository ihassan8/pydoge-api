{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcc4 Overview","text":"<p>A Python library to interact with Department of Government Efficiency (DOGE) API.</p> <p></p>  \ud83e\uddfe Table of Contents <ol> <li> About The Project </li> <li> Highlights </li> <li> Getting Started <ul> <li>Installation</li> </ul> </li> <li>Usage <ul> <li>Synchronous Fetching</li> <li>Asynchronous Pagination</li> </ul> </li> <li>Contributors </li> <li>Acknowledgements </li> </ol>"},{"location":"#about-the-project","title":"\ud83d\ude80 About The Project","text":"<p>PyDOGE API is an advanced, Python wrapper for interacting with the public-facing API of the Department of Government Efficiency (DOGE) \u2014 a federal initiative aimed at increasing transparency and fiscal accountability by sharing detailed datasets on:</p> <ul> <li>\ud83d\udcb8 Cancelled grants</li> <li>\ud83d\udcd1 Contract terminations</li> <li>\ud83c\udfe2 Lease reductions</li> <li>\ud83e\uddfe Payment transactions</li> </ul>"},{"location":"#highlights","title":"Highlights","text":"<ul> <li>Retry-safe client with 429 handling</li> <li>Auto-pagination (sync or async)</li> <li>Pydantic models &amp; dict output</li> <li>Async page parallelization (optional)</li> </ul> <p>This package enables data scientists and analysts to programmatically access and analyze the data with ease.</p>"},{"location":"#getting-started","title":"\ud83d\udccc Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<p>Install: <pre><code>pip install pydoge-api\n</code></pre> Upgrade: <pre><code>pip install --upgrade pydoge-api\n</code></pre></p>"},{"location":"#usage","title":"\ud83d\udcda Usage","text":""},{"location":"#synchronous-fetching","title":"Synchronous Fetching","text":"<pre><code>from pydoge_api import DogeAPI\n\napi = DogeAPI(\n    fetch_all=True,             # get all pages\n    output_pydantic=False,      # dict output\n    handle_response=True,       # parse response\n    run_async=False             # \u2190 synchronous mode\n)\n\n# Grants sorted by savings\ngrants = api.savings.get_grants(sort_by=\"savings\")\n\n# Filter payments by agency\npayments = api.payments.get_payments(filter=\"agency\", filter_value=\"NASA\")\n</code></pre>"},{"location":"#asynchronous-pagination","title":"Asynchronous Pagination","text":"<pre><code>api = DogeAPI(\n    fetch_all=True,\n    output_pydantic=True,\n    handle_response=True,\n    run_async=True              # \u2190 enable async parallel fetch\n)\n\ngrants = api.savings.get_grants(sort_by=\"value\")\nprint(grants.meta.total_results)\n</code></pre> <p>(back to top)</p>"},{"location":"#contributors","title":"\ud83d\udc6a Contributors","text":"<p>All contributions are welcome. If you have a suggestion that would make this better, please fork the repo and create a merge request. You can also simply open an issue with the label 'enhancement'.</p> <p>Don't forget to give the project a star! Thanks again!</p>"},{"location":"#acknowledgments","title":"\ud83d\udc4f Acknowledgments","text":"<p>Inspiration, code snippets, etc.</p> <p>(back to top)</p>"},{"location":"usage/","title":"Quickstart Guide","text":""},{"location":"usage/#standard-synchronous-usage","title":"Standard Synchronous Usage","text":"<pre><code>from pydoge_api import DogeAPI\n\napi = DogeAPI(\n    fetch_all=True,\n    output_pydantic=False,\n    handle_response=True,\n    run_async=False\n)\n\ngrants = api.savings.get_grants(sort_by=\"savings\")\npayments = api.payments.get_payments(filter=\"agency\", filter_value=\"GSA\")\n</code></pre>"},{"location":"usage/#async-usage-example","title":"Async Usage Example","text":"<pre><code>api = DogeAPI(\n    fetch_all=True,\n    output_pydantic=True,\n    run_async=True\n)\n\ngrants = api.savings.get_grants(sort_by=\"value\")\n</code></pre>"},{"location":"usage/#config-flags","title":"Config Flags","text":"Flag Description fetch_all Fetch all paginated results output_pydantic Return Pydantic models if True handle_response Return parsed data or raw httpx.Response run_async Use async parallel fetching if True"},{"location":"reference/client/","title":"DogeAPI Client","text":""},{"location":"reference/client/#pydoge_api.DogeAPI","title":"DogeAPI","text":"<pre><code>DogeAPI(\n    *,\n    fetch_all=False,\n    output_pydantic=False,\n    handle_response=True,\n    run_async=False\n)\n</code></pre> <p>Entry point for the DOGE API SDK.</p> <p>Parameters:</p>"},{"location":"reference/client/#pydoge_api.DogeAPI(fetch_all)","title":"<code>fetch_all</code>","text":"\u2013            <p>Automatically fetch all pages (True) or just one page (False).</p>"},{"location":"reference/client/#pydoge_api.DogeAPI(output_pydantic)","title":"<code>output_pydantic</code>","text":"\u2013            <p>Return data as pydantic models (True) or as plain dicts (False).</p>"},{"location":"reference/client/#pydoge_api.DogeAPI(handle_response)","title":"<code>handle_response</code>","text":"\u2013            <p>If False, return raw httpx.Response.</p>"},{"location":"reference/client/#pydoge_api.DogeAPI(run_async)","title":"<code>run_async</code>","text":"\u2013            <p>Enable async parallel pagination if True.</p>"},{"location":"reference/models_payments/","title":"Payments Models","text":""},{"location":"reference/models_payments/#pydoge_api.models.payments","title":"payments","text":""},{"location":"reference/models_savings/","title":"Savings Models","text":""},{"location":"reference/models_savings/#pydoge_api.models.savings","title":"savings","text":""},{"location":"reference/payments/","title":"Payments","text":""},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsEndpoint","title":"PaymentsEndpoint","text":"<pre><code>PaymentsEndpoint(client: DogeAPIClient, api: DogeAPI)\n</code></pre> <p>Payments made by the US Government. Currently, this includes a limited amount of grant payments issued from the Program Support Center, but will expand to include all payments from the US Government..</p> <p>Methods:</p> <ul> <li> <code>get_payments</code>             \u2013              <p>Retrieve government payments with optional filtering and pagination.</p> </li> </ul>"},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsEndpoint.get_payments","title":"get_payments","text":"<pre><code>get_payments(\n    *,\n    sort_by=None,\n    sort_order=None,\n    page=1,\n    per_page=100,\n    filter=None,\n    filter_value=None\n)\n</code></pre> <p>Retrieve government payments with optional filtering and pagination.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>PaymentResponse | dict | Response</code>           \u2013            <p>Parsed Pydantic model if <code>output_pydantic=True</code>, raw dict otherwise, or <code>httpx.Response</code> if <code>handle_response=False</code>.</p> </li> </ul>"},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsEndpoint.get_payments(sort_by)","title":"<code>sort_by</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Field to sort by. Options include 'amount', 'post_date', etc.</p>"},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsEndpoint.get_payments(sort_order)","title":"<code>sort_order</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Sort order direction: 'asc' or 'desc'.</p>"},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsEndpoint.get_payments(page)","title":"<code>page</code>","text":"(<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Page number to fetch (default is 1).</p>"},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsEndpoint.get_payments(per_page)","title":"<code>per_page</code>","text":"(<code>int</code>, default:                   <code>100</code> )           \u2013            <p>Items per page to return (default 100, max 500).</p>"},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsEndpoint.get_payments(filter)","title":"<code>filter</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Optional filter key (e.g. 'agency').</p>"},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsEndpoint.get_payments(filter_value)","title":"<code>filter_value</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Value to filter results by.</p>"},{"location":"reference/savings/","title":"Savings","text":""},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint","title":"SavingsEndpoint","text":"<pre><code>SavingsEndpoint(client: DogeAPIClient, api: DogeAPI)\n</code></pre> <p>Grants, contracts and leases the Department of Government Efficiency has cancelled.</p> <p>Methods:</p> <ul> <li> <code>get_grants</code>             \u2013              <p>Retrieve canceled government grants.</p> </li> <li> <code>get_contracts</code>             \u2013              <p>Retrieve canceled government contracts.</p> </li> <li> <code>get_leases</code>             \u2013              <p>Retrieve canceled or terminated government leases.</p> </li> </ul>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_grants","title":"get_grants","text":"<pre><code>get_grants(\n    *, sort_by=None, sort_order=None, page=1, per_page=100\n)\n</code></pre> <p>Retrieve canceled government grants.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>GrantResponse | dict | Response</code>           \u2013            <p>Parsed model, raw dict, or raw response depending on DogeAPI config.</p> </li> </ul>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_grants(sort_by)","title":"<code>sort_by</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Field to sort by: 'savings', 'value', or 'date'.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_grants(sort_order)","title":"<code>sort_order</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Sort order direction: 'asc' or 'desc'.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_grants(page)","title":"<code>page</code>","text":"(<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Page number to start from (default: 1).</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_grants(per_page)","title":"<code>per_page</code>","text":"(<code>int</code>, default:                   <code>100</code> )           \u2013            <p>Number of results per page (default: 100).</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_contracts","title":"get_contracts","text":"<pre><code>get_contracts(\n    *, sort_by=None, sort_order=None, page=1, per_page=100\n)\n</code></pre> <p>Retrieve canceled government contracts.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>ContractResponse | dict | Response</code>           \u2013            <p>Parsed model, raw dict, or raw response depending on DogeAPI config.</p> </li> </ul>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_contracts(sort_by)","title":"<code>sort_by</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Field to sort by. Options: 'savings', 'value', or 'agency'.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_contracts(sort_order)","title":"<code>sort_order</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Sort direction: 'asc' or 'desc'.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_contracts(page)","title":"<code>page</code>","text":"(<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Page number to retrieve (default is 1).</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_contracts(per_page)","title":"<code>per_page</code>","text":"(<code>int</code>, default:                   <code>100</code> )           \u2013            <p>Number of results per page (default is 100).</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_leases","title":"get_leases","text":"<pre><code>get_leases(\n    *, sort_by=None, sort_order=None, page=1, per_page=100\n)\n</code></pre> <p>Retrieve canceled or terminated government leases.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>LeaseResponse | dict | Response</code>           \u2013            <p>Parsed model, raw dict, or raw response depending on DogeAPI config.</p> </li> </ul>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_leases(sort_by)","title":"<code>sort_by</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Field to sort by. Options: 'sq_ft', 'value', or 'agency'.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_leases(sort_order)","title":"<code>sort_order</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Sort direction: 'asc' or 'desc'.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_leases(page)","title":"<code>page</code>","text":"(<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Page number to retrieve (default is 1).</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsEndpoint.get_leases(per_page)","title":"<code>per_page</code>","text":"(<code>int</code>, default:                   <code>100</code> )           \u2013            <p>Number of results per page (default is 100).</p>"}]}