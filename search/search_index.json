{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcc4 Overview","text":"<p>A Python library to interact with Department of Government Efficiency (DOGE) API.</p> <p></p>  \ud83e\uddfe Table of Contents <ol> <li> About The Project </li> <li> Highlights </li> <li> Getting Started <ul> <li>Installation</li> </ul> </li> <li>Contributors </li> <li>Acknowledgements </li> </ol>"},{"location":"#about-the-project","title":"\ud83d\udc0d About The Project","text":"<p>PyDOGE API is an advanced, Python wrapper for interacting with the public-facing API of the Department of Government Efficiency (DOGE) \u2014 a federal initiative aimed at increasing transparency and fiscal accountability by sharing detailed datasets on:</p> <ul> <li>\ud83d\udcb8 Cancelled grants</li> <li>\ud83d\udcd1 Contract terminations</li> <li>\ud83c\udfe2 Lease reductions</li> <li>\ud83e\uddfe Payment transactions</li> </ul>"},{"location":"#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Auto-pagination (sync or async, fetch all pages if needed)</li> <li><code>.export()</code> to CSV, Excel, or JSON with timestamped filenames  </li> <li><code>.to_dataframe()</code> for Pandas users </li> <li><code>.summary()</code> with analytics (rows, nulls, dtypes, stats)  </li> <li><code>summary(save_as=\"...\")</code> for file logging  </li> <li>Returns Pydantic models &amp; dict output</li> <li>Retry-safe client with 429 handling</li> </ul> <p>This package enables data scientists and analysts to programmatically access and analyze the data with ease.</p>"},{"location":"#getting-started","title":"\ud83d\udccc Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<p>Install: <pre><code>pip install pydoge-api\n</code></pre> Upgrade: <pre><code>pip install --upgrade pydoge-api\n</code></pre></p> <p>Documentation</p> <p>Full developer docs with API reference, usage, and model schema:</p> <ul> <li>\ud83d\udc49 Docs and Examples (PyDOGE)</li> <li>\ud83d\udc49 Official Swagger Page</li> </ul>"},{"location":"#contributors","title":"\ud83d\udc6a Contributors","text":"<p>All contributions are welcome. If you have a suggestion that would make this better, please fork the repo and create a merge request. You can also simply open an issue with the label 'enhancement'.</p> <p>Don't forget to give the project a star! Thanks again!</p>"},{"location":"#acknowledgments","title":"\ud83d\udc4f Acknowledgments","text":"<p>Inspiration, code snippets, etc.</p> <p>(back to top)</p>"},{"location":"usage/","title":"Quickstart Guide","text":""},{"location":"usage/#get-grants-and-sorted-by-savings","title":"Get Grants and sorted by savings","text":"<pre><code>from pydoge_api import DogeAPI\n\nwith DogeAPI(fetch_all=True, run_async=False) as api:\n    grants = api.savings.get_grants(sort_by=\"savings\")\n    df = grants.to_dataframe()\n    print(df.head())\n\n    # Export to CSV\n    grants.export(\"grants_q1\", format=\"csv\")\n\n    # Show summary in terminal\n    grants.summary(verbose=True)\n\n    # Save the summary as markdown\n    grants.summary(save_as=\"logs/grants_summary.md\")\n</code></pre>"},{"location":"usage/#get-contracts-and-sorted-by-agency","title":"Get Contracts and sorted by agency","text":"<pre><code>with DogeAPI(fetch_all=True, run_async=False) as api:\n    contracts = api.savings.get_contracts(sort_by=\"agency\")\n    df = contracts.to_dataframe()\n    print(df.head())\n\n    # Export to CSV\n    contracts.export(\"contracts_q1\", format=\"csv\")\n\n    # Show summary in terminal\n    contracts.summary(verbose=True)\n\n    # Save the summary as markdown\n    contracts.summary(save_as=\"logs/contracts_summary.md\")\n</code></pre>"},{"location":"usage/#get-leases","title":"Get Leases","text":"<pre><code>with DogeAPI(fetch_all=True, run_async=False) as api:\n    leases = api.savings.get_leases()\n    df = leases.to_dataframe()\n    print(df.head())\n\n    # Export to CSV\n    leases.export(\"leases_q1\", format=\"csv\")\n\n    # Show summary in terminal\n    leases.summary(verbose=True)\n\n    # Save the summary as markdown\n    leases.summary(save_as=\"logs/leases_summary.md\")\n</code></pre>"},{"location":"usage/#get-payments-and-filter-payments-by-agency","title":"Get Payments and filter payments by agency","text":"<pre><code>with DogeAPI(fetch_all=True, run_async=False) as api:\n    payments = api.payments.get_payments(filter=\"agency\", filter_value=\"NASA\")\n    df =payments.to_dataframe()\n    print(df.head())\n\n    # Export to CSV\n    payments.export(\"payments_q1\", format=\"csv\")\n\n    # Show summary in terminal\n    payments.summary(verbose=True)\n\n    # Save the summary as markdown\n    payments.summary(save_as=\"logs/payments_summary.md\")\n</code></pre>"},{"location":"usage/#without-using-context-manager","title":"Without using Context Manager","text":"<pre><code>api = DogeAPI(\n    fetch_all=True, # Get all records if True. Default False\n    run_async=False # For Async set this to True\n)\n\ntry:\n    # Get Grants and sorted by savings\n    grants = api.savings.get_grants(sort_by=\"savings\")\n\n    # Get Contracts and sorted by agency\n    contracts = api.savings.get_contracts(sort_by=\"agency\")\n\n    # Get Leases\n    leases = api.savings.get_leases()\n\n    # Get Payments and filter payments by agency\n    payments = api.payments.get_payments(filter=\"agency\", filter_value=\"NASA\")\n\n    # Export to CSV\n    grants.export(\"grants_q1\", format=\"csv\")\n\n    # Show summary in terminal\n    grants.summary(verbose=True)\n\n    # Save the summary as markdown\n    grants.summary(save_as=\"logs/grants_summary.md\")\n\nfinally:\n    api.close()\n</code></pre>"},{"location":"usage/#config-flags","title":"Config Flags","text":"Flag Description fetch_all Fetch all paginated results output_pydantic Return Pydantic models if True handle_response Return parsed data or raw httpx.Response run_async Use async parallel fetching if True"},{"location":"usage/#export-formats","title":"Export Formats","text":"<pre><code>response.export(\"filename\", format=\"csv\")\nresponse.export(\"filename\", format=\"xlsx\")\nresponse.export(\"filename\", format=\"json\")\n</code></pre>"},{"location":"usage_exports/","title":"\ud83d\udcbe Exporting &amp; Summarizing Data","text":"<p>Every response returned by the PyDoge SDK \u2014 whether a Pydantic model or plain dictionary \u2014 supports:</p> <ul> <li><code>.export()</code> \u2014 Save data to CSV, Excel, or JSON</li> <li><code>.to_dataframe()</code> \u2014 Get a Pandas DataFrame</li> <li><code>.summary()</code> \u2014 Generate analytic summaries: rows, nulls, types, stats</li> </ul> <p>These methods are available on all major responses: - Grants - Payments - Contracts - Leases</p>"},{"location":"usage_exports/#export","title":"\ud83d\udce4 <code>.export()</code>","text":"<p><pre><code>with DogeAPI(fetch_all=True) as api:\n    grants = api.savings.get_grants()\n    path = grants.export(\"grants_q1\", format=\"csv\")\n    print(f\"Saved to: {path}\")\n</code></pre> This saves a timestamped file like:</p> <pre><code>grants_q2_20250410_172308.csv\n</code></pre> <p>Supported Formats - csv \u2192 grants_q1_YYYYMMDD_HHMMSS.csv - xlsx \u2192 Excel spreadsheet - json \u2192 JSON array (records-style)</p>"},{"location":"usage_exports/#to_dataframe","title":"\ud83d\udcca <code>.to_dataframe()</code>","text":"<p>Convert any result into a Pandas DataFrame for analysis:</p> <p><pre><code>with DogeAPI() as api:\n    df = api.savings.get_contracts().to_dataframe()\n    print(df.head())\n    print(df.shape)\n    df.plot(\"date_closed\", \"savings\")\n</code></pre> This is helpful for:</p> <ul> <li>Analytics</li> <li>Plotting</li> <li>Custom filters</li> </ul>"},{"location":"usage_exports/#summaryverbosetrue","title":"\ud83d\udcc8 <code>.summary(verbose=True)</code>","text":"<p>Get a full analytical breakdown of your dataset:</p> <p><pre><code>with DogeAPI() as api:\n    grants.summary()\n\n    # Show summary in terminal\n    grants.summary(verbose=True)\n\n    # Save the summary as markdown\n    grants.summary(save_as=\"logs/grants_summary.md\")\n</code></pre> Output:</p> <ul> <li>Total rows and columns</li> <li>Nulls by column</li> <li>Dtypes</li> <li>Numeric stats (mean, min, max)</li> <li>Top categories</li> <li>Optional .head() preview</li> </ul> <p>\ud83e\uddea Example Output</p> <pre><code>\ud83d\udcca PyDoge Data Summary\n========================================\n\ud83e\uddfe Rows       : 2450\n\ud83e\uddec Columns    : 8\n\ud83d\udd73\ufe0f  Total NaNs : 17\n\n\ud83d\udcd1 Column Data Types:\nid              int64\nagency         object\nsavings       float64\n\n\ud83d\udcc9 Nulls by Column:\nsavings     7\nstatus      10\n\n\ud83d\udcc8 Numeric Column Stats:\n         count      mean      std     min       max\nsavings  2443.0  151234.3  98231.4  100.0   998500.0\n\n\ud83d\udd20 Top Categories:\n[status]\ncompleted     1300\ncancelled      900\npending        250\n\n\ud83d\udccb Sample Preview:\n   id agency status savings\n0   1   NASA   completed  100000.0\n...\n</code></pre>"},{"location":"reference/analytics/","title":"\ud83d\udcca DogeAnalytics","text":"<p><code>DogeAnalytics</code> is a high-level data enrichment and reporting layer built on top of <code>SavingsAPI</code>. It helps you quickly analyze grants, leases, and contracts using the DOGE API.</p>"},{"location":"reference/analytics/#instantiating-dogeanalytics","title":"\ud83d\ude80 Instantiating DogeAnalytics","text":""},{"location":"reference/analytics/#with-context-manager-recommended","title":"\u2705 With context manager (recommended)","text":"<pre><code>from doge_api import DogeAnalytics\n\nwith DogeAnalytics(fetch_all=True) as da:\n    df = da.grants_dataframe()\n    print(df.head())\n</code></pre>"},{"location":"reference/analytics/#without-context-manager","title":"\u2757 Without context manager","text":"<pre><code>da = DogeAnalytics(fetch_all=True)\ndf = da.grants_dataframe()\nda.close()  # Don't forget to close manually\n</code></pre>"},{"location":"reference/analytics/#constructor-parameters","title":"\u2699\ufe0f Constructor Parameters","text":"Param Description Default fetch_all Fetch all pages for paginated responses True output_pydantic Return full Pydantic model vs plain dict True handle_response Whether to parse and return the response body True run_async Enable async pagination where supported False **client_kwargs Additional kwargs passed to DogeAPIClient (e.g. headers)"},{"location":"reference/analytics/#available-dataframes","title":"\ud83d\udcd1 Available DataFrames","text":"<pre><code>da.grants_dataframe()\nda.contracts_dataframe()\nda.leases_dataframe()\n</code></pre>"},{"location":"reference/analytics/#top-agency-analysis","title":"\ud83c\udfc6 Top Agency Analysis","text":"<p><pre><code>da.top_agencies_by_savings(top_n=10)\nda.top_agencies_by_leases(top_n=5)\nda.top_agencies_by_contracts(top_n=3)\n</code></pre> Each returns a sorted DataFrame like: | agency | savings | | NASA | 4,580,000 | | DHS | 3,990,000 |</p>"},{"location":"reference/analytics/#exporting-results","title":"\ud83d\udcbe Exporting Results","text":"<p>Use .export_dataset() to save any DataFrame with a timestamped filename.</p> <pre><code>df = da.top_agencies_by_savings()\nda.export_dataset(df, \"top_savers\", format=\"xlsx\")\n</code></pre> <p>Supported Formats</p> <ul> <li>csv \u2192 Comma-separated</li> <li>xlsx \u2192 Excel spreadsheet</li> <li>json \u2192 Pretty-printed array</li> </ul>"},{"location":"reference/analytics_agencies/","title":"\ud83c\udfe2 Agency-Level Analytics","text":"<p>This page covers the <code>DogeAnalytics</code> methods used to rank agencies based on financial metrics like savings, contracts, and leases.</p> <p>All methods return a ranked <code>pandas.DataFrame</code> with the agency name and the aggregated total value.</p>"},{"location":"reference/analytics_agencies/#top_agencies_by_savingstop_n5","title":"\ud83d\udcb0 <code>top_agencies_by_savings(top_n=5)</code>","text":""},{"location":"reference/analytics_agencies/#description","title":"Description","text":"<p>Returns the top N agencies by total reported savings from the <code>/savings/grants</code> endpoint.</p>"},{"location":"reference/analytics_agencies/#parameters","title":"Parameters","text":"Name Type Description <code>top_n</code> int Number of agencies to return"},{"location":"reference/analytics_agencies/#returns","title":"Returns","text":"<p><code>pandas.DataFrame</code> with columns:</p> <ul> <li><code>agency</code></li> <li><code>savings</code></li> </ul>"},{"location":"reference/analytics_agencies/#example","title":"Example","text":"<pre><code>with DogeAnalytics(fetch_all=True) as da:\n    top_savings = da.top_agencies_by_savings(top_n=10)\n    print(top_savings)\n</code></pre>"},{"location":"reference/analytics_agencies/#top_agencies_by_contractstop_n5","title":"\ud83d\udcdc <code>top_agencies_by_contracts(top_n=5)</code>","text":""},{"location":"reference/analytics_agencies/#description_1","title":"Description","text":"<p>Returns the top N agencies based on total contract value from the <code>/savings/contracts</code> endpoint.</p> <p>Assumes the field is named <code>contract_value</code> in the API response.</p>"},{"location":"reference/analytics_agencies/#parameters_1","title":"Parameters","text":"Name Type Description <code>top_n</code> int Number of agencies to return"},{"location":"reference/analytics_agencies/#returns_1","title":"Returns","text":"<p><code>pandas.DataFrame</code> with columns:</p> <ul> <li><code>agency</code></li> <li><code>savings</code></li> </ul>"},{"location":"reference/analytics_agencies/#example_1","title":"Example","text":"<pre><code>with DogeAnalytics(fetch_all=True) as da:\n    top_contracts = da.top_agencies_by_contracts()\n    print(top_contracts)\n</code></pre>"},{"location":"reference/analytics_agencies/#top_agencies_by_leasestop_n5","title":"\ud83c\udfe2 <code>top_agencies_by_leases(top_n=5)</code>","text":""},{"location":"reference/analytics_agencies/#description_2","title":"Description","text":"<p>Returns the top N agencies by total lease cost from the <code>/savings/leases</code> endpoint.</p> <p>Assumes the field is named <code>lease_cost</code> in the API response.</p>"},{"location":"reference/analytics_agencies/#parameters_2","title":"Parameters","text":"Name Type Description <code>top_n</code> int Number of agencies to return"},{"location":"reference/analytics_agencies/#returns_2","title":"Returns","text":"<p><code>pandas.DataFrame</code> with columns:</p> <ul> <li><code>agency</code></li> <li><code>savings</code></li> </ul>"},{"location":"reference/analytics_agencies/#example_2","title":"Example","text":"<pre><code>with DogeAnalytics(fetch_all=True) as da:\n    top_leases = da.top_agencies_by_leases(top_n=3)\n    print(top_leases)\n</code></pre>"},{"location":"reference/analytics_agencies/#customizing-the-aggregation","title":"\ud83d\udd01 Customizing the Aggregation","text":"<p>You can easily write your own metric-based groupings:</p> <pre><code>df = da.contracts_dataframe()\ntop = df.groupby(\"agency\")[\"contract_type_A\"].sum().sort_values(ascending=False).head(5)\nprint(top)\n</code></pre>"},{"location":"reference/analytics_agencies/#exporting-the-rankings","title":"\ud83d\udce4 Exporting the Rankings","text":"<pre><code>da.export_dataset(top_savings, \"top_savings_by_agency\", format=\"xlsx\")\n</code></pre>"},{"location":"reference/api/","title":"\ud83e\udde0 DogeAPI","text":"<p>The <code>DogeAPI</code> class provides a unified interface to all API endpoints in the DOGE SDK.</p> <p>It wraps the lower-level client and injects <code>SavingsAPI</code>, and <code>PaymentsAPI</code> \u2014 all using a shared session and common flags.</p>"},{"location":"reference/api/#class-reference","title":"\ud83d\udce6 Class Reference","text":""},{"location":"reference/api/#pydoge_api.api.DogeAPI","title":"DogeAPI","text":"<pre><code>DogeAPI(\n    fetch_all: bool = False,\n    output_pydantic: bool = True,\n    handle_response: bool = True,\n    run_async: bool = False,\n    **client_kwargs\n)\n</code></pre> <p>Unified entrypoint for interacting with all DOGE endpoints.</p> <p>Attributes:</p> <ul> <li> <code>client</code>               (<code>DogeAPIClient</code>)           \u2013            <p>Shared client instance used across all endpoint classes.</p> </li> <li> <code>savings</code>               (<code>SavingsAPI</code>)           \u2013            <p>Access to /savings endpoints.</p> </li> <li> <code>payments</code>               (<code>PaymentsAPI</code>)           \u2013            <p>Access to /payments endpoints.</p> </li> </ul> <p>Parameters:</p> <ul> <li> </li> <li> </li> <li> </li> <li> </li> <li> </li> </ul> <p>Methods:</p> <ul> <li> <code>close</code>             \u2013              <p>Close the internal client session.</p> </li> </ul> Source code in <code>src/pydoge_api/api.py</code> <pre><code>def __init__(\n    self,\n    fetch_all: bool = False,\n    output_pydantic: bool = True,\n    handle_response: bool = True,\n    run_async: bool = False,\n    **client_kwargs\n):\n    \"\"\"\n    Initialize DogeAPI with a shared DogeAPIClient and global endpoint config flags.\n\n    Parameters\n    ----------\n    fetch_all : bool\n        Automatically fetch all pages for paginated endpoints.\n    output_pydantic : bool\n        If True, return Pydantic models. If False, return plain dicts with .export().\n    handle_response : bool\n        If True, decode responses. If False, return raw httpx.Response.\n    run_async : bool\n        If True, use asyncio-based pagination (if supported).\n    **client_kwargs : dict\n        Passed to DogeAPIClient (e.g. base_url, timeout, headers).\n    \"\"\"\n    self.fetch_all = fetch_all\n    self.output_pydantic = output_pydantic\n    self.handle_response = handle_response\n    self.run_async = run_async\n\n    self.client = DogeAPIClient(**client_kwargs)\n    self.savings = SavingsAPI(client=self.client, api=self)\n    self.payments = PaymentsAPI(client=self.client, api=self)\n</code></pre>"},{"location":"reference/api/#pydoge_api.api.DogeAPI(fetch_all)","title":"<code>fetch_all</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>Automatically fetch all pages for paginated endpoints.</p>"},{"location":"reference/api/#pydoge_api.api.DogeAPI(output_pydantic)","title":"<code>output_pydantic</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, return Pydantic models. If False, return plain dicts with .export().</p>"},{"location":"reference/api/#pydoge_api.api.DogeAPI(handle_response)","title":"<code>handle_response</code>","text":"(<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>If True, decode responses. If False, return raw httpx.Response.</p>"},{"location":"reference/api/#pydoge_api.api.DogeAPI(run_async)","title":"<code>run_async</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, use asyncio-based pagination (if supported).</p>"},{"location":"reference/api/#pydoge_api.api.DogeAPI(**client_kwargs)","title":"<code>**client_kwargs</code>","text":"(<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>Passed to DogeAPIClient (e.g. base_url, timeout, headers).</p>"},{"location":"reference/api/#pydoge_api.api.DogeAPI.close","title":"close","text":"<pre><code>close()\n</code></pre> <p>Close the internal client session.</p> Source code in <code>src/pydoge_api/api.py</code> <pre><code>def close(self):\n    \"\"\"Close the internal client session.\"\"\"\n    self.client.close()\n</code></pre>"},{"location":"reference/client/","title":"\u2699\ufe0f DogeAPIClient","text":"<p>The <code>DogeAPIClient</code> is the low-level engine powering all API interactions. It wraps the <code>httpx.Client</code> and provides retry logic, timeouts, and request abstraction.</p>"},{"location":"reference/client/#class-reference","title":"\ud83d\udd0c Class Reference","text":""},{"location":"reference/client/#pydoge_api.client.DogeAPIClient","title":"DogeAPIClient","text":"<pre><code>DogeAPIClient(\n    base_url: str = \"https://api.doge.gov\",\n    timeout: float = 10.0,\n    session: Optional[Client] = None,\n    max_retries: int = 5,\n    backoff_factor: float = 1.5,\n    **httpx_kwargs\n)\n</code></pre> <p>DOGE API client with built-in retry logic for unstable endpoints.</p> <p>Methods:</p> <ul> <li> <code>rest_request</code>             \u2013              <p>Perform a REST request with retry logic for 429 and 5xx errors.</p> </li> </ul> Source code in <code>src/pydoge_api/client.py</code> <pre><code>def __init__(\n    self,\n    base_url: str = \"https://api.doge.gov\",\n    timeout: float = 10.0,\n    session: Optional[httpx.Client] = None,\n    max_retries: int = 5,\n    backoff_factor: float = 1.5,\n    **httpx_kwargs\n):\n    self.base_url = base_url\n    self.timeout = timeout\n    self.max_retries = max_retries\n    self.backoff_factor = backoff_factor\n\n    if session:\n        if not isinstance(session, httpx.Client):\n            raise TypeError(\"Custom session must be an instance of httpx.Client\")\n        self.client = session\n        self._owns_session = False\n    else:\n        self.client = httpx.Client(base_url=base_url, timeout=timeout, **httpx_kwargs)\n        self._owns_session = True\n</code></pre>"},{"location":"reference/client/#pydoge_api.client.DogeAPIClient.rest_request","title":"rest_request","text":"<pre><code>rest_request(method: str, url: str, **kwargs) -&gt; Response\n</code></pre> <p>Perform a REST request with retry logic for 429 and 5xx errors.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>Response</code>           \u2013            <p>Response object, or raises DogeAPIRequestError.</p> </li> </ul> Source code in <code>src/pydoge_api/client.py</code> <pre><code>def rest_request(self, method: str, url: str, **kwargs) -&gt; httpx.Response:\n    \"\"\"\n    Perform a REST request with retry logic for 429 and 5xx errors.\n\n    Parameters\n    ----------\n    method : str\n        HTTP method (GET, POST, etc.)\n    url : str\n        Full target URL.\n    **kwargs : dict\n        Passed to httpx.request() (params, json, data, headers, etc.)\n\n    Returns\n    -------\n    httpx.Response\n        Response object, or raises DogeAPIRequestError.\n    \"\"\"\n    retriable = {429, 500, 502, 503, 504}\n    retries = 0\n\n    while retries &lt;= self.max_retries:\n        try:\n            response = self.client.request(method, url, **kwargs)\n            if response.status_code &lt; 400 or response.status_code not in retriable:\n                return response\n        except httpx.RequestError as e:\n            logger.warning(f\"\u26a0\ufe0f Network error during {method} {url}: {e}\")\n            response = getattr(e, \"response\", None)\n            if response is None:\n                raise\n\n        # Retry triggered\n        retry_after = response.headers.get(\"Retry-After\")\n        if retry_after:\n            try:\n                wait = float(retry_after)\n            except ValueError:\n                wait = self.backoff_factor * (retries + 1)\n        else:\n            jitter = random.uniform(0, 0.3)\n            wait = self.backoff_factor * (2 ** retries) + jitter\n\n        logger.warning(\n            f\"\ud83d\udd01 Retry {retries + 1}/{self.max_retries} for {method} {url} \"\n            f\"\u2192 HTTP {response.status_code}. Waiting {wait:.2f}s...\"\n        )\n        time.sleep(wait)\n        retries += 1\n\n    logger.error(f\"\u274c {method} {url} failed after {self.max_retries} retries.\")\n    raise DogeAPIRequestError(method, url, response.status_code, \"Max retries exceeded\")\n</code></pre>"},{"location":"reference/client/#pydoge_api.client.DogeAPIClient.rest_request(method)","title":"<code>method</code>","text":"(<code>str</code>)           \u2013            <p>HTTP method (GET, POST, etc.)</p>"},{"location":"reference/client/#pydoge_api.client.DogeAPIClient.rest_request(url)","title":"<code>url</code>","text":"(<code>str</code>)           \u2013            <p>Full target URL.</p>"},{"location":"reference/client/#pydoge_api.client.DogeAPIClient.rest_request(**kwargs)","title":"<code>**kwargs</code>","text":"(<code>dict</code>, default:                   <code>{}</code> )           \u2013            <p>Passed to httpx.request() (params, json, data, headers, etc.)</p>"},{"location":"reference/models_payments/","title":"Payments Models","text":""},{"location":"reference/models_payments/#pydoge_api.models.payments","title":"payments","text":""},{"location":"reference/models_savings/","title":"Savings Models","text":""},{"location":"reference/models_savings/#pydoge_api.models.savings","title":"savings","text":""},{"location":"reference/payments/","title":"Payments","text":""},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsAPI","title":"PaymentsAPI","text":"<pre><code>PaymentsAPI(client: DogeAPIClient, api: DogeAPI)\n</code></pre> <p>Access payments-related endpoints (/payments/*).</p> <p>client : DogeAPIClient     HTTP client instance. api : DogeAPI     Shared config provider for fetch_all, output_pydantic, etc.</p> <p>Methods:</p> <ul> <li> <code>get_payments</code>             \u2013              <p>Retrieve payment records made by government agencies.</p> </li> </ul> Source code in <code>src/pydoge_api/endpoints/payments.py</code> <pre><code>def __init__(self, client: DogeAPIClient, api: 'DogeAPI'):\n    \"\"\"\n    Parameters\n    ----------\n    client : DogeAPIClient\n        HTTP client instance.\n    api : DogeAPI\n        Shared config provider for fetch_all, output_pydantic, etc.\n    \"\"\"\n    self.client = client\n    self.api = api\n</code></pre>"},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsAPI.get_payments","title":"get_payments","text":"<pre><code>get_payments(\n    *,\n    agency: Optional[str] = None,\n    year: Optional[int] = None,\n    page: int = 1,\n    per_page: int = 100\n)\n</code></pre> <p>Retrieve payment records made by government agencies.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>PaymentResponse or dict or Response</code>           \u2013            <p>Pydantic model if <code>output_pydantic=True</code>, exportable dict if <code>output_pydantic=False</code>, or raw response if <code>handle_response=False</code>.</p> </li> </ul> Source code in <code>src/pydoge_api/endpoints/payments.py</code> <pre><code>def get_payments(\n    self,\n    *,\n    agency: Optional[str] = None,\n    year: Optional[int] = None,\n    page: int = 1,\n    per_page: int = 100,\n):\n    \"\"\"\n    Retrieve payment records made by government agencies.\n\n    Parameters\n    ----------\n    agency : str, optional\n        Filter by agency name.\n    year : int, optional\n        Filter by transaction year.\n    page : int, default=1\n        Starting page number.\n    per_page : int, default=100\n        Number of results per page.\n\n    Returns\n    -------\n    PaymentResponse or dict or httpx.Response\n        Pydantic model if `output_pydantic=True`,\n        exportable dict if `output_pydantic=False`,\n        or raw response if `handle_response=False`.\n    \"\"\"\n    params = PaymentParams(agency=agency, year=year, page=page, per_page=per_page)\n    query = params.model_dump(exclude_none=True)\n\n    result = self.client.get(\"/payments\", params=query, decode=self.api.handle_response)\n    if not self.api.handle_response:\n        return result\n\n    model = PaymentResponse(**result)\n\n    return _fetch_paginated(\n        api=self.api,\n        client=self.client,\n        endpoint=\"/payments\",\n        params=params,\n        initial_response=model,\n        key=\"payments\",\n        model_cls=PaymentResponse,\n    )\n</code></pre>"},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsAPI.get_payments(agency)","title":"<code>agency</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Filter by agency name.</p>"},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsAPI.get_payments(year)","title":"<code>year</code>","text":"(<code>int</code>, default:                   <code>None</code> )           \u2013            <p>Filter by transaction year.</p>"},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsAPI.get_payments(page)","title":"<code>page</code>","text":"(<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Starting page number.</p>"},{"location":"reference/payments/#pydoge_api.endpoints.payments.PaymentsAPI.get_payments(per_page)","title":"<code>per_page</code>","text":"(<code>int</code>, default:                   <code>100</code> )           \u2013            <p>Number of results per page.</p>"},{"location":"reference/savings/","title":"SavingsAPI","text":""},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsAPI","title":"SavingsAPI","text":"<pre><code>SavingsAPI(client: DogeAPIClient, api: DogeAPI)\n</code></pre> <p>Access all endpoints under /savings including grants, contracts, and leases.</p> <p>This class handles paginated retrieval of financial savings data via a shared DogeAPIClient. Supports both Pydantic model and dict export modes.</p> <p>client : DogeAPIClient     Shared HTTP client instance for making API calls. api : DogeAPI     Reference to parent DogeAPI instance for runtime config flags.</p> <p>Methods:</p> <ul> <li> <code>get_grants</code>             \u2013              <p>Retrieve cancelled or reduced government grants.</p> </li> <li> <code>get_contracts</code>             \u2013              <p>Retrieve cancelled or optimized government contracts.</p> </li> <li> <code>get_leases</code>             \u2013              <p>Retrieve terminated or downsized government leases.</p> </li> </ul> Source code in <code>src/pydoge_api/endpoints/savings.py</code> <pre><code>def __init__(self, client: DogeAPIClient, api: 'DogeAPI'):\n    \"\"\"\n    Parameters\n    ----------\n    client : DogeAPIClient\n        Shared HTTP client instance for making API calls.\n    api : DogeAPI\n        Reference to parent DogeAPI instance for runtime config flags.\n    \"\"\"\n    self.client = client\n    self.api = api\n</code></pre>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsAPI.get_grants","title":"get_grants","text":"<pre><code>get_grants(\n    *,\n    sort_by: Optional[str] = None,\n    sort_order: Optional[str] = None,\n    page: int = 1,\n    per_page: int = 100\n)\n</code></pre> <p>Retrieve cancelled or reduced government grants.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>GrantResponse or dict or Response</code>           \u2013            <p>Pydantic model if <code>output_pydantic=True</code>, exportable dict if <code>output_pydantic=False</code>, or raw response if <code>handle_response=False</code>.</p> </li> </ul> Source code in <code>src/pydoge_api/endpoints/savings.py</code> <pre><code>def get_grants(\n    self,\n    *,\n    sort_by: Optional[str] = None,\n    sort_order: Optional[str] = None,\n    page: int = 1,\n    per_page: int = 100\n):\n    \"\"\"\n    Retrieve cancelled or reduced government grants.\n\n    Parameters\n    ----------\n    sort_by : str, optional\n        Field to sort by. Options include 'savings', 'value', or 'date'.\n    sort_order : str, optional\n        Sort direction. One of 'asc' or 'desc'.\n    page : int, default=1\n        Starting page number for paginated results.\n    per_page : int, default=100\n        Number of records to retrieve per page.\n\n    Returns\n    -------\n    GrantResponse or dict or httpx.Response\n        Pydantic model if `output_pydantic=True`,\n        exportable dict if `output_pydantic=False`,\n        or raw response if `handle_response=False`.\n    \"\"\"\n    params = GrantParams(sort_by=sort_by, sort_order=sort_order, page=page, per_page=per_page)\n    query = params.model_dump(exclude_none=True)\n\n    result = self.client.get(\"/savings/grants\", params=query, decode=self.api.handle_response)\n    if not self.api.handle_response:\n        return result\n\n    model = GrantResponse(**result)\n\n    return _fetch_paginated(\n        api=self.api,\n        client=self.client,\n        endpoint=\"/savings/grants\",\n        params=params,\n        initial_response=model,\n        key=\"grants\",\n        model_cls=GrantResponse,\n    )\n</code></pre>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsAPI.get_grants(sort_by)","title":"<code>sort_by</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Field to sort by. Options include 'savings', 'value', or 'date'.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsAPI.get_grants(sort_order)","title":"<code>sort_order</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Sort direction. One of 'asc' or 'desc'.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsAPI.get_grants(page)","title":"<code>page</code>","text":"(<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Starting page number for paginated results.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsAPI.get_grants(per_page)","title":"<code>per_page</code>","text":"(<code>int</code>, default:                   <code>100</code> )           \u2013            <p>Number of records to retrieve per page.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsAPI.get_contracts","title":"get_contracts","text":"<pre><code>get_contracts(\n    *,\n    sort_by: Optional[str] = None,\n    sort_order: Optional[str] = None,\n    page: int = 1,\n    per_page: int = 100\n)\n</code></pre> <p>Retrieve cancelled or optimized government contracts.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>ContractResponse or dict or Response</code>           \u2013            <p>Pydantic model if <code>output_pydantic=True</code>, exportable dict if <code>output_pydantic=False</code>, or raw response if <code>handle_response=False</code>.</p> </li> </ul> Source code in <code>src/pydoge_api/endpoints/savings.py</code> <pre><code>def get_contracts(\n    self,\n    *,\n    sort_by: Optional[str] = None,\n    sort_order: Optional[str] = None,\n    page: int = 1,\n    per_page: int = 100\n):\n    \"\"\"\n    Retrieve cancelled or optimized government contracts.\n\n    Parameters\n    ----------\n    sort_by : str, optional\n        Field to sort by. Options include 'savings', 'value', or 'agency'.\n    sort_order : str, optional\n        Sort direction. One of 'asc' or 'desc'.\n    page : int, default=1\n        Starting page number for paginated results.\n    per_page : int, default=100\n        Number of records to retrieve per page.\n\n    Returns\n    -------\n    ContractResponse or dict or httpx.Response\n        Pydantic model if `output_pydantic=True`,\n        exportable dict if `output_pydantic=False`,\n        or raw response if `handle_response=False`.\n    \"\"\"\n    params = ContractParams(sort_by=sort_by, sort_order=sort_order, page=page, per_page=per_page)\n    query = params.model_dump(exclude_none=True)\n\n    result = self.client.get(\"/savings/contracts\", params=query, decode=self.api.handle_response)\n    if not self.api.handle_response:\n        return result\n\n    model = ContractResponse(**result)\n\n    return _fetch_paginated(\n        api=self.api,\n        client=self.client,\n        endpoint=\"/savings/contracts\",\n        params=params,\n        initial_response=model,\n        key=\"contracts\",\n        model_cls=ContractResponse,\n    )\n</code></pre>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsAPI.get_contracts(sort_by)","title":"<code>sort_by</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Field to sort by. Options include 'savings', 'value', or 'agency'.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsAPI.get_contracts(sort_order)","title":"<code>sort_order</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Sort direction. One of 'asc' or 'desc'.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsAPI.get_contracts(page)","title":"<code>page</code>","text":"(<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Starting page number for paginated results.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsAPI.get_contracts(per_page)","title":"<code>per_page</code>","text":"(<code>int</code>, default:                   <code>100</code> )           \u2013            <p>Number of records to retrieve per page.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsAPI.get_leases","title":"get_leases","text":"<pre><code>get_leases(\n    *,\n    sort_by: Optional[str] = None,\n    sort_order: Optional[str] = None,\n    page: int = 1,\n    per_page: int = 100\n)\n</code></pre> <p>Retrieve terminated or downsized government leases.</p> <p>Parameters:</p> <p>Returns:</p> <ul> <li> <code>LeaseResponse or dict or Response</code>           \u2013            <p>Pydantic model if <code>output_pydantic=True</code>, exportable dict if <code>output_pydantic=False</code>, or raw response if <code>handle_response=False</code>.</p> </li> </ul> Source code in <code>src/pydoge_api/endpoints/savings.py</code> <pre><code>def get_leases(\n    self,\n    *,\n    sort_by: Optional[str] = None,\n    sort_order: Optional[str] = None,\n    page: int = 1,\n    per_page: int = 100\n):\n    \"\"\"\n    Retrieve terminated or downsized government leases.\n\n    Parameters\n    ----------\n    sort_by : str, optional\n        Field to sort by. Options include 'sq_ft', 'value', or 'agency'.\n    sort_order : str, optional\n        Sort direction. One of 'asc' or 'desc'.\n    page : int, default=1\n        Starting page number for paginated results.\n    per_page : int, default=100\n        Number of records to retrieve per page.\n\n    Returns\n    -------\n    LeaseResponse or dict or httpx.Response\n        Pydantic model if `output_pydantic=True`,\n        exportable dict if `output_pydantic=False`,\n        or raw response if `handle_response=False`.\n    \"\"\"\n    params = LeaseParams(sort_by=sort_by, sort_order=sort_order, page=page, per_page=per_page)\n    query = params.model_dump(exclude_none=True)\n\n    result = self.client.get(\"/savings/leases\", params=query, decode=self.api.handle_response)\n    if not self.api.handle_response:\n        return result\n\n    model = LeaseResponse(**result)\n\n    return _fetch_paginated(\n        api=self.api,\n        client=self.client,\n        endpoint=\"/savings/leases\",\n        params=params,\n        initial_response=model,\n        key=\"leases\",\n        model_cls=LeaseResponse,\n    )\n</code></pre>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsAPI.get_leases(sort_by)","title":"<code>sort_by</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Field to sort by. Options include 'sq_ft', 'value', or 'agency'.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsAPI.get_leases(sort_order)","title":"<code>sort_order</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Sort direction. One of 'asc' or 'desc'.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsAPI.get_leases(page)","title":"<code>page</code>","text":"(<code>int</code>, default:                   <code>1</code> )           \u2013            <p>Starting page number for paginated results.</p>"},{"location":"reference/savings/#pydoge_api.endpoints.savings.SavingsAPI.get_leases(per_page)","title":"<code>per_page</code>","text":"(<code>int</code>, default:                   <code>100</code> )           \u2013            <p>Number of records to retrieve per page.</p>"},{"location":"reference/utils_export/","title":"\ud83e\uddf1 ExportableMixin Utility","text":""},{"location":"reference/utils_export/#pydoge_api.utils.exporter.ExportMixin","title":"ExportMixin","text":"<p>Methods:</p> <ul> <li> <code>export</code>             \u2013              </li> <li> <code>to_dataframe</code>             \u2013              <p>Convert the response data collection to a Pandas DataFrame.</p> </li> <li> <code>summary</code>             \u2013              <p>Print and optionally save an analytics summary of the dataset.</p> </li> </ul>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.ExportMixin.export","title":"export","text":"<pre><code>export(\n    filename: str = \"doge_data\", format: str = \"csv\"\n) -&gt; Path\n</code></pre>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.ExportMixin.to_dataframe","title":"to_dataframe","text":"<pre><code>to_dataframe() -&gt; DataFrame\n</code></pre> <p>Convert the response data collection to a Pandas DataFrame.</p> <p>Returns:</p> <ul> <li> <code>DataFrame</code>           \u2013            </li> </ul>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.ExportMixin.summary","title":"summary","text":"<pre><code>summary(verbose: bool = False, save_as: str = None)\n</code></pre> <p>Print and optionally save an analytics summary of the dataset.</p> <p>Parameters:</p>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.ExportMixin.summary(verbose)","title":"<code>verbose</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, print a head preview of the data.</p>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.ExportMixin.summary(save_as)","title":"<code>save_as</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Path to save the summary text (e.g. \"summary.md\" or \"report.txt\").</p>"},{"location":"reference/utils_export/#utility-functions","title":"\ud83d\udd01 Utility Functions","text":""},{"location":"reference/utils_export/#handle_dict","title":"<code>handle_dict</code>","text":"<p>This ensures that even raw dict responses support <code>.export()</code>.</p>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.handle_dict","title":"handle_dict","text":"<pre><code>handle_dict(obj)\n</code></pre> Source code in <code>src/pydoge_api/utils/exporter.py</code> <pre><code>def handle_dict(obj):\n    if isinstance(obj, dict) and not hasattr(obj, \"export\"):\n        new_obj = DictExportable(**obj)\n        return new_obj\n    return obj\n</code></pre>"},{"location":"reference/utils_export/#dictexportable","title":"<code>DictExportable</code>","text":"<p>A subclass of <code>dict</code> that supports <code>.export()</code>, <code>.to_dataframe()</code>, <code>.summary()</code>. Used when <code>output_pydantic=False</code>.</p>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.DictExportable","title":"DictExportable","text":"<p>A dict subclass with .export() support</p> <p>Methods:</p> <ul> <li> <code>summary</code>             \u2013              <p>Print and optionally save an analytics summary of the dataset.</p> </li> <li> <code>to_dataframe</code>             \u2013              <p>Convert the response data collection to a Pandas DataFrame.</p> </li> </ul>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.DictExportable.summary","title":"summary","text":"<pre><code>summary(verbose: bool = False, save_as: str = None)\n</code></pre> <p>Print and optionally save an analytics summary of the dataset.</p> <p>Parameters:</p> Source code in <code>src/pydoge_api/utils/exporter.py</code> <pre><code>def summary(self, verbose: bool = False, save_as: str = None):\n    \"\"\"\n    Print and optionally save an analytics summary of the dataset.\n\n    Parameters\n    ----------\n    verbose : bool\n        If True, print a head preview of the data.\n    save_as : str, optional\n        Path to save the summary text (e.g. \"summary.md\" or \"report.txt\").\n    \"\"\"\n\n    df = self.to_dataframe()\n    out = StringIO()\n\n    def p(text=\"\"):\n        print(text, file=out)\n\n    p(\"\ud83d\udcca PyDoge Data Summary\")\n    p(\"=\" * 40)\n    p(f\"\ud83e\uddfe Rows       : {df.shape[0]}\")\n    p(f\"\ud83e\uddec Columns    : {df.shape[1]}\")\n    p(f\"\ud83d\udd73\ufe0f  Total NaNs : {df.isnull().sum().sum()}\\n\")\n\n    p(\"\ud83d\udcd1 Column Data Types:\")\n    p(df.dtypes.to_string())\n    p(\"\")\n\n    nulls = df.isnull().sum()\n    nulls = nulls[nulls &gt; 0]\n    p(\"\ud83d\udcc9 Nulls by Column:\")\n    p(nulls.to_string() if not nulls.empty else \"\u2705 No null values detected\")\n    p(\"\")\n\n    numeric_cols = df.select_dtypes(include=\"number\").columns\n    if not numeric_cols.empty:\n        p(\"\ud83d\udcc8 Numeric Column Stats:\")\n        stats = df[numeric_cols].agg([\"count\", \"mean\", \"std\", \"min\", \"max\"]).T\n        stats = stats[[\"count\", \"mean\", \"std\", \"min\", \"max\"]]\n        p(stats.round(2).to_string())\n        p(\"\")\n\n    cat_cols = df.select_dtypes(include=\"object\").columns\n    if not cat_cols.empty:\n        p(\"\ud83d\udd20 Top Categories:\")\n        for col in cat_cols:\n            top = df[col].value_counts().head(3)\n            p(f\"\\n[{col}]\")\n            p(top.to_string())\n\n    if verbose:\n        p(\"\\n\ud83d\udccb Sample Preview:\")\n        p(df.head().to_string())\n\n    # Print to terminal\n    print(out.getvalue())\n\n    # Optionally save to file\n    if save_as:\n        with open(save_as, \"w\", encoding=\"utf-8\") as f:\n            f.write(out.getvalue())\n</code></pre>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.DictExportable.summary(verbose)","title":"<code>verbose</code>","text":"(<code>bool</code>, default:                   <code>False</code> )           \u2013            <p>If True, print a head preview of the data.</p>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.DictExportable.summary(save_as)","title":"<code>save_as</code>","text":"(<code>str</code>, default:                   <code>None</code> )           \u2013            <p>Path to save the summary text (e.g. \"summary.md\" or \"report.txt\").</p>"},{"location":"reference/utils_export/#pydoge_api.utils.exporter.DictExportable.to_dataframe","title":"to_dataframe","text":"<pre><code>to_dataframe() -&gt; DataFrame\n</code></pre> <p>Convert the response data collection to a Pandas DataFrame.</p> <p>Returns:</p> <ul> <li> <code>DataFrame</code>           \u2013            </li> </ul> Source code in <code>src/pydoge_api/utils/exporter.py</code> <pre><code>def to_dataframe(self) -&gt; pd.DataFrame:\n    \"\"\"\n    Convert the response data collection to a Pandas DataFrame.\n\n    Returns\n    -------\n    pd.DataFrame\n    \"\"\"\n    return pd.DataFrame(self._get_collection())\n</code></pre>"}]}